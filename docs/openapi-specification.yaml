openapi: 3.0.3
info:
  title: Car Listing API
  description: API for Bath Hackathon 2025 Car Listing Application
  version: 1.0.0
  contact:
    name: Bath Hackathon Team
    email: example@example.com

servers:
  - url: /api/v1
    description: Local development server

paths:
  /listings:
    get:
      summary: Get all listings
      description: Retrieves a paginated list of car listings with filtering options
      operationId: getListings
      tags:
        - listings
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          description: Items per page (max 50)
          schema:
            type: integer
            default: 20
            maximum: 50
        - name: make
          in: query
          description: Filter by vehicle make
          schema:
            type: string
        - name: model
          in: query
          description: Filter by vehicle model
          schema:
            type: string
        - name: min_price
          in: query
          description: Minimum price in GBP
          schema:
            type: integer
        - name: max_price
          in: query
          description: Maximum price in GBP
          schema:
            type: integer
        - name: year_from
          in: query
          description: Minimum year of manufacture
          schema:
            type: integer
        - name: year_to
          in: query
          description: Maximum year of manufacture
          schema:
            type: integer
        - name: fuel_type
          in: query
          description: Fuel type filter
          schema:
            type: string
            enum: [petrol, diesel, electric, hybrid]
        - name: transmission
          in: query
          description: Transmission type filter
          schema:
            type: string
            enum: [manual, automatic]
        - name: sort_by
          in: query
          description: Field to sort by
          schema:
            type: string
            enum: [price, year, posted_date]
            default: posted_date
        - name: sort_order
          in: query
          description: Sort direction
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: List of car listings
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      listings:
                        type: array
                        items:
                          $ref: '#/components/schemas/ListingSummary'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /listings/{id}:
    get:
      summary: Get listing details
      description: Retrieves detailed information about a specific car listing
      operationId: getListingById
      tags:
        - listings
      parameters:
        - name: id
          in: path
          required: true
          description: Listing ID
          schema:
            type: string
      responses:
        '200':
          description: Detailed listing information
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      listing:
                        $ref: '#/components/schemas/ListingDetail'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /vehicles/{id}:
    get:
      summary: Get vehicle details
      description: Retrieves detailed information about a specific vehicle
      operationId: getVehicleById
      tags:
        - vehicles
      parameters:
        - name: id
          in: path
          required: true
          description: Vehicle ID
          schema:
            type: string
      responses:
        '200':
          description: Detailed vehicle information
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      vehicle:
                        $ref: '#/components/schemas/VehicleDetail'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /vehicles/lookup:
    post:
      summary: Lookup vehicle by registration
      description: Retrieves vehicle information using the registration number
      operationId: lookupVehicleByRegistration
      tags:
        - vehicles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - registration
              properties:
                registration:
                  type: string
                  description: Vehicle registration number
                  example: AB12CDE
      responses:
        '200':
          description: Vehicle information found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      vehicle:
                        $ref: '#/components/schemas/VehicleDetail'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /vehicles/{id}/mot_histories:
    get:
      summary: Get vehicle MOT history
      description: Retrieves the MOT test history for a specific vehicle
      operationId: getVehicleMOTHistory
      tags:
        - vehicles
        - mot
      parameters:
        - name: id
          in: path
          required: true
          description: Vehicle ID
          schema:
            type: string
      responses:
        '200':
          description: MOT history for the vehicle
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      mot_histories:
                        type: array
                        items:
                          $ref: '#/components/schemas/MOTHistory'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /searches:
    post:
      summary: Save a search
      description: Saves the current search parameters for future reference
      operationId: saveSearch
      tags:
        - searches
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '201':
          description: Search saved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      search_id:
                        type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /searches/recent:
    get:
      summary: Get recent searches
      description: Retrieves the most recent searches
      operationId: getRecentSearches
      tags:
        - searches
      responses:
        '200':
          description: List of recent searches
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      searches:
                        type: array
                        items:
                          $ref: '#/components/schemas/Search'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    ListingSummary:
      type: object
      properties:
        id:
          type: string
          example: abc123
        title:
          type: string
          example: 2018 Volkswagen Golf GTI 2.0 TSI
        price:
          type: number
          format: float
          example: 18995
        location:
          type: string
          example: Bath, Somerset
        thumbnail_url:
          type: string
          example: https://example.com/images/vw-golf-1.jpg
        post_date:
          type: string
          format: date-time
          example: 2023-04-01T10:30:00Z
        vehicle:
          type: object
          properties:
            make:
              type: string
              example: Volkswagen
            model:
              type: string
              example: Golf
            year:
              type: integer
              example: 2018
            fuel_type:
              type: string
              example: petrol
            transmission:
              type: string
              example: manual
            mileage:
              type: integer
              example: 35000

    ListingDetail:
      type: object
      properties:
        id:
          type: string
          example: abc123
        title:
          type: string
          example: 2018 Volkswagen Golf GTI 2.0 TSI
        price:
          type: number
          format: float
          example: 18995
        location:
          type: string
          example: Bath, Somerset
        description:
          type: string
          example: Beautiful example of a VW Golf GTI in excellent condition...
        post_date:
          type: string
          format: date-time
          example: 2023-04-01T10:30:00Z
        source_url:
          type: string
          example: https://example-car-site.com/listing/abc123
        image_urls:
          type: array
          items:
            type: string
          example:
            - https://example.com/images/vw-golf-1.jpg
            - https://example.com/images/vw-golf-2.jpg
        vehicle:
          $ref: '#/components/schemas/VehicleDetail'

    VehicleDetail:
      type: object
      properties:
        id:
          type: string
          example: veh456
        make:
          type: string
          example: Volkswagen
        model:
          type: string
          example: Golf
        variant:
          type: string
          example: GTI 2.0 TSI
        year:
          type: integer
          example: 2018
        fuel_type:
          type: string
          example: petrol
        transmission:
          type: string
          example: manual
        engine_size:
          type: string
          example: 2.0L
        body_type:
          type: string
          example: hatchback
        doors:
          type: integer
          example: 5
        color:
          type: string
          example: Tornado Red
        mileage:
          type: integer
          example: 35000
        registration:
          type: string
          example: AB18 XYZ
        vin:
          type: string
          example: WVWZZZ1KZJW123456
        listing_id:
          type: string
          example: abc123
        tax_status:
          type: string
          example: Taxed
        tax_due_date:
          type: string
          format: date
          example: 2024-06-30
        mot_status:
          type: string
          example: Valid
        mot_expiry_date:
          type: string
          format: date
          example: 2024-05-15

    MOTHistory:
      type: object
      properties:
        id:
          type: string
          example: mot123
        test_date:
          type: string
          format: date
          example: 2023-01-15
        expiry_date:
          type: string
          format: date
          example: 2024-01-14
        odometer:
          type: integer
          example: 32500
        result:
          type: string
          enum: [pass, fail]
          example: pass
        advisory_notes:
          type: string
          example: Rear brake pads wearing thin
        failure_reasons:
          type: string
          example: null

    SearchRequest:
      type: object
      properties:
        make:
          type: string
          example: Volkswagen
        model:
          type: string
          example: Golf
        min_price:
          type: integer
          example: 15000
        max_price:
          type: integer
          example: 25000
        year_from:
          type: integer
          example: 2018
        year_to:
          type: integer
          example: 2022
        fuel_type:
          type: string
          example: petrol
        transmission:
          type: string
          example: manual

    Search:
      type: object
      properties:
        id:
          type: string
          example: search123
        query:
          $ref: '#/components/schemas/SearchRequest'
        created_at:
          type: string
          format: date-time
          example: 2023-04-02T14:30:00Z

    Pagination:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        total_pages:
          type: integer
          example: 10
        total_count:
          type: integer
          example: 198
        per_page:
          type: integer
          example: 20

    Error:
      type: object
      properties:
        code:
          type: string
          example: resource_not_found
        message:
          type: string
          example: The requested resource was not found
        details:
          type: object

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: error
              error:
                $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: error
              error:
                $ref: '#/components/schemas/Error'

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: error
              error:
                $ref: '#/components/schemas/Error' 